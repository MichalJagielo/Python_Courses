# -*- coding: utf-8 -*-
"""BitPeak_Zadanie#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ba16c8Wa4gx4Y9iuenO-xcDDR8cZDQBH
"""

# Zadanie#1
!pip install faker
from faker import Faker
import pandas as pd
import random 
import time 
import calendar 
import datetime

fake = Faker("pl_PL")
def generate_ssns(n):
  pesel_lista = []
  for i in range(n):
    pesel_lista.append(fake.pesel())
  pesel_lista_pd = pd.Series(pesel_lista, index = range(1,n+1),name = "PESEL")
  return pesel_lista_pd
generate_ssns(10)

#"""df = pd.DataFrame((list_of_pesel), columns = ["PESEL"])
#return df"""

# Zadanie#1.1
import pandas as pd
import random 
import calendar 
import datetime
import time


def generate_unique_ssns(
    n, gender, 
    date_from = datetime.datetime.strptime('01.01.1900', "%d.%m.%Y"), 
    date_to = datetime.datetime.strptime('31.12.1999', "%d.%m.%Y")
    ):

    """I've tried with pd.Series().unique or 
    pd.Series().flags(allows_duplicates_labels=False)
    but the results were not satisfied"""

    flag = True
    while flag:
        pesel_lista=[]
        for i in range(n):
            pesel_lista.append(pesel_11_digits(gender,date_from, date_to))
        pesel_lista_pd = pd.Series(pesel_lista, index = range(1, n+1))
        pesel_lista_pd_2 = pesel_lista_pd.drop_duplicates()
        if pesel_lista_pd.size ==  pesel_lista_pd_2.size:
            flag = False
    return pesel_lista_pd

    """Checksum calculation
    Having a PESEL in the form of ABCDEFGHIJK, one can check the validity 
    of the number by computing the following expression:
    A×1 + B×3 + C×7 + D×9 + E×1 + F×3 + G×7 + H×9 + I×1 + J×3
    The checksum is the last digit of result of the above 
    expression subtracted from 10"""    


def valid_sum(pesel):
    valid_no = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3]
    parity_no = 0
    for idx, val in enumerate(pesel):
        parity_no = parity_no + valid_no[0] * val
    parity_no = parity_no % 10 
    return parity_no



def pesel_11_digits(gender,date_from, date_to):

    YYYY = random.randint(
        int(date_from.strftime("%Y")), int(date_to.strftime("%Y"))
        )
    MM = random.randint(
        int(date_from.strftime("%m")), int(date_to.strftime("%m")))

    """choose random day depending on year and month"""
    DD_on_YYYYMM = calendar.monthrange(YYYY, MM)[1]
    DD = random.randint(1, DD_on_YYYYMM)

    """set year for pesel -> 2 last digits YYYY"""
    YY = int(str(YYYY)[-2:])

    """set correct month depending on century -> wikipedia"""
    if int(str(YYYY)[:2]) < 19: MM += 80
    elif 19 <= int(str(YYYY)[:2]) < 20: MM
    elif 20 <= int(str(YYYY)[:2]) < 21: MM += 20
    elif 21 <= int(str(YYYY)[:2]) < 22: MM += 40
    else: MM += 60

    """#####For test only (YY = 90, MM = 1, DD = random.randint(1,20))#####"""

    """I will generate the rest numbers of pesel YYMMDD-ZZZ-X-Q 
    then I'm going to connect elements"""

    """6 first digits for pesel YYMMDD"""
    pesel = list(
        (int(YY / 10), 
         YY % 10, 
         int(MM / 10), 
         MM % 10, 
         int(DD / 10), 
         DD % 10)
        )
    
    """3 unique digits for pesesl position ZZZ"""
    for i in range(3):
        zzz = random.randint(0,9)
        pesel.append(zzz)
  
    """1 digit for pesel position X -> gender depending on female, male"""    
    if gender == "F": 
        pesel.append(random.choice((0, 2, 4, 6, 8)))
    elif gender == "M": 
        pesel.append(random.choice((1, 3, 5, 7, 9)))

    """Cheksum sum of pesel digits for last digit parity number Q. 
    Join 11 digits to one string"""

    pesel.append(valid_sum(pesel))

    return "".join(str(el) for el in pesel)

generate_unique_ssns(10, "F")

# Zadanie#1.2
"""In my opinion the range of dates of birth is to small to generate '11' unique 
digits for PESEL with large number of record. 
Unique function works fine with records not higher then 10^3."""

def timer(fn, *args):
    start_time = time.time()
    to_execute = fn(*args)
    execution_time = time.time() - start_time
    return ('{0} took {1:.6f}sec to execute'.format(fn.__name__, execution_time))
    

for p in range(1,4):
    print(p)
    x = timer(generate_unique_ssns, 10**p, "M")
    y = timer(generate_ssns, 10**p)
    print(x)
    print(y)

#Zadanie#1.3

def validate_ssn(pesel, gender, birthdate):
    

####validate_ssn(pesel:str, gender:str("F(female)"/"M(male)"), birthdate(str))    
    

    """
    ##At the beginning I wanted to check if the pesel number is correct, 
    but later I have commented (not delete) this step. 
    I think the purpose of the task is not exactly like that##""" 
    
    # factors = [1,3,7,9,1,3,7,9,1,3]
    # pesel_digits = [int(char) for char in str(pesel)]
    # pesel_last_digit = pesel_digits[-1]
    # checksum = sum(list(dig1*dig2 for dig1, dig2 in zip(factors, pesel_digits[0:-1])))
    # checksum_list = [int(char) for char in str(checksum)]
    # if checksum % 10 != 0:
    #    assert pesel_last_digit == 10 - checksum_list[-1], "INVALID PESEL NUMBER"
    # else:
    #     print("PESEL NUMBER IS CORRECT")

    assert len(pesel) == 11, "PESEL must consist of 11 digits"

    """Check gender_digit from pesel"""
    if int(str(pesel[-2])) in [1,3,5,7,9]: gender = "M"
    else: gender = "F"
    #if gender != "F":
    #   raise Exception ("Wrong gender digit in pesel")

    pesel_YY = pesel[:2]
    pesel_MM = pesel[2:4]
    pesel_DD = pesel[4:6]
    
    """###I Calculate month and year with century###"""
    pesel_MM = int(str(pesel[2:4]))
    if pesel_MM in range(81,93): pesel_YYYY = '18' + pesel_YY
    elif pesel_MM in range(1,13): pesel_YYYY = '19' + pesel_YY
    elif pesel_MM in range(21,33): pesel_YYYY = '20' + pesel_YY
    elif pesel_MM in range(41,53): pesel_YYYY = '21' + pesel_YY
    elif pesel_MM in range(61,73): pesel_YYYY = '22' + pesel_YY
    else:
        raise ValueError("Invalid pesel number - wrong month number")

    """##I Calculate day depending on month. I am aware of the lack of condition
    for February for every four years, 
    and I know the code doesn't look perfectly###""" 
    pesel_DD = int(str(pesel[4:6]))
    if pesel_MM in [82,2,22,42,62]: 
        assert pesel_DD in range(1,30), "Invalid pesel - wrong day number"
    
    elif pesel_MM in [
                      81,1,21,41,61,83,3,23,43,63,85,5,25,45,65,
                      87,7,27,47,67,88,8,28,48,68,90,10,30,50,70,
                      92,12,32,52,72
                      ]: 
        assert pesel_DD in range(1,32), "Invalid pesel- wrong day number"
    
    elif pesel_MM in [
                      84,4,24,44,64,86,6,26,46,66,89,9,29,49,69,
                      91,11,31,51,71
                      ]: 
        assert pesel_DD in range(1,31), "Invalid pesel - wrong day number"

    """Convert int to str fill with leading zero"""
    pesel_DD = str(pesel_DD).zfill(2)
    pesel_MM = str(pesel_MM).zfill(2)

    """Joining birthdate from pesel digits, 
    then convert both values to datetime to compare"""
    birthdate_from_pesel = pesel_DD+'.'+pesel_MM+'.'+pesel_YYYY
    birthdate_from_pesel = datetime.datetime.strptime(birthdate_from_pesel, '%d.%m.%Y')
    birthdate = datetime.datetime.strptime(birthdate, '%d.%m.%Y')

    print('birthdate_from_pesel :', birthdate_from_pesel)
    print('birthdate: ', birthdate)
    assert birthdate_from_pesel == birthdate, "Wrong birthdate against to pesel"
    print("Birthdate from PESEL number is the same as given birthdate")
    
    return ("pesel:", pesel, "gender:", gender, "birthdate:", birthdate)
    
validate_ssn('85032575320', "F", '25.03.1985')

# Zadanie#1.4
"""Only for one century 19"""
def test_validate_ssn(n):
    

    data_M = generate_unique_ssns(n, "M")
    data_F = generate_unique_ssns(n, "F")
    data = pd.concat([data_M, data_F])
    data.index = range(1, n*2+1)
 
    dd = data.map(lambda val: val[4:6])
    mm = data.map(lambda val: val[2:4])
    yy = data.map(lambda val: val[:2])
    
    birthdate_data = dd+'.'+mm+'.'+'19'+yy
   

    gender_data = data.map(lambda val: "M" if int(val[-2]) in [1,3,5,7,9] else "F")
   
    valid_data_frame = pd.DataFrame(
        {'pesel':data, 'gender':gender_data, 'birthdate':birthdate_data}
        )
    
    valid_data_frame['validate_ssn'] = list(map(
        validate_ssn, valid_data_frame["pesel"], 
        valid_data_frame["gender"], valid_data_frame["birthdate"])
    )
    
    return valid_data_frame
   
    
test_validate_ssn(4)